plugins {
    id "com.gradleup.shadow" version "8.3.4"
    id 'java'
    id "io.freefair.lombok" version "8.13.1"
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.10"
    id "xyz.jpenilla.run-velocity" version "2.3.1"
}

group = '_1ms'
version = '1.10'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
}

dependencies {
    compileOnly 'com.velocitypowered:velocity-api:3.4.0-SNAPSHOT'
    annotationProcessor 'com.velocitypowered:velocity-api:3.4.0-SNAPSHOT'
    implementation 'dev.dejvokep:boosted-yaml:1.3.7'
    implementation 'org.bstats:bstats-velocity:3.1.0'
// https://mvnrepository.com/artifact/org.mariadb.jdbc/mariadb-java-client
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.5.3'

}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = [
            'version': project.version
    ]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}

tasks {
    runVelocity {
        // Configure the Velocity version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        velocityVersion("3.4.0-SNAPSHOT")
    }
}

shadowJar {
    relocate 'dev.dejvokep.boostedyaml', 'libs'
    relocate 'org.jetbrains.annotations', 'libs'
    relocate 'org.bstats', 'libs'
    relocate 'org.mariadb.jdbc', 'libs'
    relocate 'com.github.benmanes.caffeine', 'libs'
    relocate 'com.google.errorprone.annotations', 'libs'
    relocate 'com.sun.jna', 'libs'
    relocate 'org.checkerframework', 'libs'
    relocate 'org.intellij.lang.annotations', 'libs'
    relocate 'org.apache.commons.logging', 'libs'
    relocate 'waffle', 'libs'
    from(rootProject.file('LICENSE')) {
        into ''
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

rootProject.idea.project.settings.taskTriggers.afterSync generateTemplates